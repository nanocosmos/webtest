{"ast":null,"code":"var _jsxFileName = \"/Users/annamatic/Desktop/webtest/src/layout/ui/ActiveCampaign/NewDealAutomation.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, TextField, Button, FormControl, Select, MenuItem, InputLabel, FormHelperText } from '@material-ui/core';\nimport * as ac from '../../../utilities/acampaign-config';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    [theme.breakpoints.up('xs')]: {},\n    [theme.breakpoints.up('md')]: {}\n  },\n  inputWrapper: {\n    [theme.breakpoints.up('xs')]: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      margin: theme.spacing(2)\n    }\n  },\n  inputRow: {\n    [theme.breakpoints.up('xs')]: {\n      display: 'flex',\n      flexDirection: 'row',\n      width: '100%',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  },\n  input: {\n    width: '100%',\n    marginTop: theme.spacing(0.5),\n    '&:first-of-type': {\n      marginRight: theme.spacing(2)\n    }\n  },\n  buttonWrapper: {\n    [theme.breakpoints.up('xs')]: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      marginRight: theme.spacing(2)\n    }\n  }\n}));\nexport default function NewDealAutomation(props) {\n  const classes = useStyles();\n  const [activeCapmaignUrl] = useState(\"https://cors-anywhere.herokuapp.com/\" + ac.APIURL);\n  const [apiKey] = useState(ac.APIKEY);\n  const [headers] = useState({\n    headers: {\n      \"Api-Token\": apiKey\n    }\n  });\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [emailInvalid, setEmailInvalid] = useState(false);\n  const [firstNameInvalid, setFirstNameInvalid] = useState(false);\n  const [lastNameInvalid, setLastNameInvalid] = useState(false);\n  const [customFields, setCustomFields] = useState({\n    44: \"\",\n    46: \"\",\n    48: \"\",\n    49: \"\",\n    50: \"\",\n    51: \"\",\n    57: \"\",\n    81: \"\",\n    96: []\n  });\n\n  const checkValidName = (isFirstName, name) => {\n    let regex = /^[a-zA-Z]+$/;\n    let valid = regex.test(name) && name.length > 1;\n\n    if (isFirstName) {\n      valid ? setFirstNameInvalid(false) : setFirstNameInvalid(true);\n    }\n\n    if (!isFirstName) {\n      valid ? setLastNameInvalid(false) : setLastNameInvalid(true);\n    }\n\n    return !valid;\n  };\n\n  const checkValidEmail = email => {\n    console.log(email);\n    let regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    let valid = regex.test(String(email).toLowerCase());\n    console.log(valid);\n    valid ? setEmailInvalid(false) : setEmailInvalid(true);\n    return !valid;\n  };\n\n  const startWorkflow = () => {\n    if (!emailInvalid && !firstNameInvalid && !lastNameInvalid) {\n      createContact(firstName, lastName, email);\n      props.sendMessage();\n    }\n  };\n\n  const createContact = (firstname, lastname, email) => {\n    axios.post(`${activeCapmaignUrl}/contact/sync`, {\n      contact: {\n        email: email,\n        firstName: firstname,\n        lastName: lastname,\n        phone: \"\"\n      }\n    }, headers).then(response => {\n      let contactid = response.data.contact.id;\n      addToAutomation(contactid, ac.NEW_DEAL);\n      postAllCustomFieldValues(contactid, customFields);\n    }).catch(error => {\n      console.log(\"Error in Creating\", error);\n    });\n  };\n\n  const addToAutomation = (contactid, automation) => {\n    axios.post(`${activeCapmaignUrl}/contactAutomations`, {\n      contactAutomation: {\n        contact: contactid,\n        automation: automation\n      }\n    }, headers).then(() => {}).catch(error => {\n      console.log(\"Error in Adding to Automation\", error);\n    });\n  };\n\n  const postAllCustomFieldValues = (contactId, customFields) => {\n    for (const [key, value] of Object.entries(customFields)) {\n      axios.post(`${activeCapmaignUrl}/fieldValues`, {\n        fieldValue: {\n          contact: contactId,\n          field: key,\n          value: value\n        }\n      }, headers).then(() => {}).catch(error => {\n        console.log(\"[Error in sending the message]\", error);\n      });\n    }\n  };\n\n  const updateCustomFieldValue = (fieldId, value) => {\n    setCustomFields({ ...customFields,\n      [fieldId]: value\n    });\n  };\n\n  const appendSelectValue = event => {\n    let value = event.target.value;\n    const list = customFields[ac.USECASE.id];\n    if (list.includes(value)) list.splice(list.indexOf(value), 1);else list.push(value);\n    setCustomFields({ ...customFields,\n      [ac.USECASE.id]: value\n    });\n  };\n\n  const getForm = () => {\n    axios.get(`${activeCapmaignUrl}/forms/1`, headers).then(response => {\n      // addToAutomation(contactid, ac.NEW_DEAL);\n      console.log(response);\n    }).catch(error => {\n      console.log(\"Error in Creating\", error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.input,\n    required: true,\n    type: \"name\",\n    color: \"secondary\",\n    error: firstNameInvalid,\n    label: \"First Name\",\n    onChange: event => {\n      setFirstName(event.target.value);\n    },\n    onBlur: () => {\n      checkValidName(true, firstName);\n    },\n    helperText: firstNameInvalid ? \"Please enter a valid name.\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.input,\n    required: true,\n    type: \"name\",\n    color: \"secondary\",\n    error: lastNameInvalid,\n    label: \"Last Name\",\n    onChange: event => {\n      setLastName(event.target.value);\n    },\n    onBlur: () => {\n      checkValidName(false, lastName);\n    },\n    helperText: lastNameInvalid ? \"Please enter a valid name.\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.input,\n    required: true,\n    type: \"email\",\n    color: \"secondary\",\n    error: emailInvalid,\n    label: \"E-Mail\",\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    onBlur: () => {\n      checkValidEmail(email);\n    },\n    helperText: emailInvalid ? \"Please enter a valid email.\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, \"Usecase\"), /*#__PURE__*/React.createElement(Select, {\n    id: `${ac.USECASE.id}`,\n    autoWidth: true,\n    multiple: true,\n    value: customFields[ac.USECASE.id],\n    onChange: event => {\n      appendSelectValue(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }\n  }, ac.USECASE.values.map((value, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    value: value.value,\n    key: `${value.id}-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 33\n    }\n  }, value.value)))), [ac.REGION, ac.RTMPSOURCE, ac.INGESTS, ac.VIEWERS, ac.TRAFFIC_GB, ac.OPTIME, ac.SKYPEID, ac.MESSAGE].map((value, index) => /*#__PURE__*/React.createElement(TextField, {\n    multiline: true,\n    fullWidth: true,\n    className: classes.input,\n    color: \"secondary\",\n    key: `${value.id}-${index}`,\n    label: value.title,\n    onChange: event => {\n      updateCustomFieldValue(value.id, event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      startWorkflow();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["/Users/annamatic/Desktop/webtest/src/layout/ui/ActiveCampaign/NewDealAutomation.js"],"names":["React","useState","useEffect","useRef","axios","makeStyles","Typography","TextField","Button","FormControl","Select","MenuItem","InputLabel","FormHelperText","ac","useStyles","theme","root","breakpoints","up","inputWrapper","display","flexDirection","alignItems","margin","spacing","inputRow","width","justifyContent","input","marginTop","marginRight","buttonWrapper","NewDealAutomation","props","classes","activeCapmaignUrl","APIURL","apiKey","APIKEY","headers","email","setEmail","firstName","setFirstName","lastName","setLastName","emailInvalid","setEmailInvalid","firstNameInvalid","setFirstNameInvalid","lastNameInvalid","setLastNameInvalid","customFields","setCustomFields","checkValidName","isFirstName","name","regex","valid","test","length","checkValidEmail","console","log","String","toLowerCase","startWorkflow","createContact","sendMessage","firstname","lastname","post","contact","phone","then","response","contactid","data","id","addToAutomation","NEW_DEAL","postAllCustomFieldValues","catch","error","automation","contactAutomation","contactId","key","value","Object","entries","fieldValue","field","updateCustomFieldValue","fieldId","appendSelectValue","event","target","list","USECASE","includes","splice","indexOf","push","getForm","get","values","map","index","REGION","RTMPSOURCE","INGESTS","VIEWERS","TRAFFIC_GB","OPTIME","SKYPEID","MESSAGE","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, TextField, Button, FormControl, Select, MenuItem, InputLabel, FormHelperText } from '@material-ui/core';\n\nimport * as ac from '../../../utilities/acampaign-config';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        [theme.breakpoints.up('xs')]: {\n        },\n        [theme.breakpoints.up('md')]: {\n        }\n    },\n    inputWrapper: {\n        [theme.breakpoints.up('xs')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: theme.spacing(2)\n        }\n    },\n    inputRow: {\n        [theme.breakpoints.up('xs')]: {\n            display: 'flex',\n            flexDirection: 'row',\n            width: '100%',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n    },\n    input: {\n        width: '100%',\n        marginTop: theme.spacing(0.5),\n        '&:first-of-type': {\n            marginRight: theme.spacing(2)\n        }\n    },\n    buttonWrapper: {\n        [theme.breakpoints.up('xs')]: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n            marginRight: theme.spacing(2)\n        }\n    }\n}))\n\nexport default function NewDealAutomation(props) {\n    const classes = useStyles();\n\n    const [activeCapmaignUrl] = useState(\"https://cors-anywhere.herokuapp.com/\" + ac.APIURL);\n    const [apiKey] = useState(ac.APIKEY);\n    const [headers] = useState({\n        headers: {\n            \"Api-Token\": apiKey\n        }\n    })\n\n    const [email, setEmail] = useState(\"\");\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n\n    const [emailInvalid, setEmailInvalid] = useState(false);\n    const [firstNameInvalid, setFirstNameInvalid] = useState(false);\n    const [lastNameInvalid, setLastNameInvalid] = useState(false);\n    const [customFields, setCustomFields] = useState({\n        44: \"\",\n        46: \"\",\n        48: \"\",\n        49: \"\",\n        50: \"\",\n        51: \"\",\n        57: \"\",\n        81: \"\",\n        96: []\n    })\n\n    const checkValidName = (isFirstName, name) => {\n        let regex = /^[a-zA-Z]+$/\n        let valid = regex.test(name) && name.length > 1;\n        if (isFirstName) {\n            valid ? setFirstNameInvalid(false) : setFirstNameInvalid(true)\n        }\n        if (!isFirstName) {\n            valid ? setLastNameInvalid(false) : setLastNameInvalid(true)\n        }\n        return !valid\n    }\n\n    const checkValidEmail = (email) => {\n        console.log(email)\n        let regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let valid = regex.test(String(email).toLowerCase());\n        console.log(valid)\n        valid ? setEmailInvalid(false) : setEmailInvalid(true)\n        return !valid;\n    }\n\n    const startWorkflow = () => {\n        if (!emailInvalid && !firstNameInvalid && !lastNameInvalid) {\n            createContact(firstName, lastName, email);\n            props.sendMessage();\n        }\n    }\n\n    const createContact = (firstname, lastname, email) => {\n        axios.post(`${activeCapmaignUrl}/contact/sync`, {\n            contact: {\n                email: email,\n                firstName: firstname,\n                lastName: lastname,\n                phone: \"\"\n            }\n        }, headers).then((response) => {\n            let contactid = response.data.contact.id;\n            addToAutomation(contactid, ac.NEW_DEAL);\n            postAllCustomFieldValues(contactid, customFields)\n        }).catch((error) => {\n            console.log(\"Error in Creating\", error)\n        })\n    }\n\n    const addToAutomation = (contactid, automation) => {\n        axios.post(`${activeCapmaignUrl}/contactAutomations`, {\n            contactAutomation: {\n                contact: contactid,\n                automation: automation\n            }\n        }, headers)\n            .then(() => { })\n            .catch((error) => {\n                console.log(\"Error in Adding to Automation\", error)\n            })\n    }\n\n    const postAllCustomFieldValues = (contactId, customFields) => {\n        for (const [key, value] of Object.entries(customFields)) {\n            axios.post(`${activeCapmaignUrl}/fieldValues`, {\n                fieldValue: {\n                    contact: contactId,\n                    field: key,\n                    value: value\n                }\n            }, headers)\n                .then(() => { })\n                .catch((error) => { console.log(\"[Error in sending the message]\", error) })\n        }\n    }\n\n    const updateCustomFieldValue = (fieldId, value) => {\n        setCustomFields({\n            ...customFields,\n            [fieldId]: value\n        });\n    }\n\n    const appendSelectValue = (event) => {\n        let value = event.target.value\n        const list = customFields[ac.USECASE.id];\n\n        if (list.includes(value)) list.splice(list.indexOf(value), 1)\n        else list.push(value)\n\n        setCustomFields({\n            ...customFields,\n            [ac.USECASE.id]: value\n        });\n    }\n\n    const getForm = () => {\n        axios.get(`${activeCapmaignUrl}/forms/1`, headers).then((response) => {\n            // addToAutomation(contactid, ac.NEW_DEAL);\n            console.log(response)\n        }).catch((error) => {\n            console.log(\"Error in Creating\", error)\n        })\n    }\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.inputWrapper}>\n                <div className={classes.inputRow}>\n                    <TextField\n                        className={classes.input}\n                        required\n                        type=\"name\"\n                        color=\"secondary\"\n                        error={firstNameInvalid}\n                        label=\"First Name\"\n                        onChange={(event) => { setFirstName(event.target.value) }}\n                        onBlur={() => { checkValidName(true, firstName) }}\n                        helperText={firstNameInvalid ? \"Please enter a valid name.\" : \"\"}\n                    />\n                    <TextField\n                        className={classes.input}\n                        required\n                        type=\"name\"\n                        color=\"secondary\"\n                        error={lastNameInvalid}\n                        label=\"Last Name\"\n                        onChange={(event) => { setLastName(event.target.value) }}\n                        onBlur={() => { checkValidName(false, lastName) }}\n                        helperText={lastNameInvalid ? \"Please enter a valid name.\" : \"\"}\n                    />\n                </div>\n                <TextField\n                    className={classes.input}\n                    required\n                    type=\"email\"\n                    color=\"secondary\"\n                    error={emailInvalid}\n                    label=\"E-Mail\"\n                    onChange={(event) => { setEmail(event.target.value) }}\n                    onBlur={() => { checkValidEmail(email) }}\n                    helperText={emailInvalid ? \"Please enter a valid email.\" : \"\"}\n                />\n                <FormControl className={classes.input}>\n                    <InputLabel>Usecase</InputLabel>\n                    <Select\n                        id={`${ac.USECASE.id}`}\n                        autoWidth\n                        multiple\n                        value={customFields[ac.USECASE.id]}\n                        onChange={(event) => { appendSelectValue(event) }}\n                    >\n                        {\n                            ac.USECASE.values.map((value, index) =>\n                                <MenuItem\n                                    value={value.value}\n                                    key={`${value.id}-${index}`}\n                                >\n                                    {value.value}\n                                </MenuItem>\n                            )\n                        }\n                    </Select>\n                </FormControl>\n                {\n                    [ac.REGION,\n                    ac.RTMPSOURCE,\n                    ac.INGESTS,\n                    ac.VIEWERS,\n                    ac.TRAFFIC_GB,\n                    ac.OPTIME,\n                    ac.SKYPEID,\n                    ac.MESSAGE].map((value, index) =>\n                        <TextField\n                            multiline\n                            fullWidth\n                            className={classes.input}\n                            color=\"secondary\"\n                            key={`${value.id}-${index}`}\n                            label={value.title}\n                            onChange={(event) => { updateCustomFieldValue(value.id, event.target.value) }}\n                        />\n                    )\n                }\n            </div>\n            <div className={classes.buttonWrapper}>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => { startWorkflow() }}\n                >\n                    Submit\n                </Button>\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}