{"ast":null,"code":"var _jsxFileName = \"/Users/annamatic/Desktop/webtest/src/layout/ui/ActiveCampaign/WebRTCAutomation.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, TextField, Button } from '@material-ui/core';\nimport * as ac from '../../../utilities/acampaign-config';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    [theme.breakpoints.up('xs')]: {},\n    [theme.breakpoints.up('md')]: {}\n  },\n  textFieldWrapper: {\n    [theme.breakpoints.up('xs')]: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      margin: theme.spacing(2)\n    }\n  },\n  textField: {\n    width: '50%',\n    marginTop: theme.spacing(0.5),\n    '&:first-of-type': {\n      marginRight: theme.spacing(1)\n    }\n  },\n  buttonWrapper: {\n    [theme.breakpoints.up('xs')]: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'center'\n    }\n  }\n}));\nexport default function WebRTCAutomation(props) {\n  const classes = useStyles();\n  const [accountUrl] = useState(\"https://cors-anywhere.herokuapp.com/\" + ac.APIURL);\n  const [webcasterAutomation] = useState(ac.WEBCASTER_DEMO);\n  const [apiKey] = useState(ac.APIKEY);\n  const [headers] = useState({\n    headers: {\n      \"Api-Token\": apiKey\n    }\n  });\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [emailInvalid, setEmailInvalid] = useState(false);\n  const [nameInvalid, setNameInvalid] = useState(false);\n\n  const checkValidName = name => {\n    let regex = /^[a-zA-Z]+$/;\n    let valid = regex.test(name) && name.length > 1;\n    valid ? setNameInvalid(false) : setNameInvalid(true);\n    return valid;\n  };\n\n  const checkValidEmail = email => {\n    let regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    let valid = regex.test(String(email).toLowerCase());\n    valid ? setEmailInvalid(false) : setEmailInvalid(true);\n    return valid;\n  };\n\n  const createContact = (name, email) => {\n    axios.post(`${accountUrl}/contact/sync`, {\n      contact: {\n        email: email,\n        firstName: name,\n        lastName: \"\",\n        phone: \"\"\n      }\n    }, headers).then(response => {\n      console.log(\"added to contact list\");\n      addToAutomation(response.data.contact.id, ac.WEBCASTER_DEMO);\n    }).catch(error => {\n      console.log(\"Error in Creating\", error);\n    });\n  };\n\n  const addToAutomation = (contact, automation) => {\n    axios.post(`${accountUrl}/contactAutomations`, {\n      contactAutomation: {\n        contact: contact,\n        automation: automation\n      }\n    }, headers).then(response => {\n      console.log(\"added to automation\");\n    }).catch(error => {\n      console.log(\"Error in Adding to Automation\", error);\n    });\n  };\n\n  const showWebcaster = () => {\n    let validEmail = checkValidEmail(email);\n    let validName = checkValidName(name);\n\n    if (validEmail && validName) {\n      createContact(name, email);\n      props.showQuickDemo(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.textFieldWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.textField,\n    required: true,\n    color: \"secondary\",\n    error: nameInvalid,\n    label: \"Name\",\n    onChange: event => {\n      setName(event.target.value);\n    },\n    onBlur: () => {\n      checkValidName(name);\n    },\n    helperText: nameInvalid ? \"Please enter a valid name.\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.textField,\n    required: true,\n    color: \"secondary\",\n    error: emailInvalid,\n    label: \"E-Mail\",\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    onBlur: () => {\n      checkValidEmail(email);\n    },\n    helperText: emailInvalid ? \"Please enter a valid email.\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showWebcaster();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \"Show quick demo\")));\n}","map":{"version":3,"sources":["/Users/annamatic/Desktop/webtest/src/layout/ui/ActiveCampaign/WebRTCAutomation.js"],"names":["React","useState","useEffect","useRef","axios","makeStyles","Typography","TextField","Button","ac","useStyles","theme","root","breakpoints","up","textFieldWrapper","display","flexDirection","alignItems","margin","spacing","textField","width","marginTop","marginRight","buttonWrapper","justifyContent","WebRTCAutomation","props","classes","accountUrl","APIURL","webcasterAutomation","WEBCASTER_DEMO","apiKey","APIKEY","headers","email","setEmail","name","setName","emailInvalid","setEmailInvalid","nameInvalid","setNameInvalid","checkValidName","regex","valid","test","length","checkValidEmail","String","toLowerCase","createContact","post","contact","firstName","lastName","phone","then","response","console","log","addToAutomation","data","id","catch","error","automation","contactAutomation","showWebcaster","validEmail","validName","showQuickDemo","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,MAAhC,QAA8C,mBAA9C;AAEA,OAAO,KAAKC,EAAZ,MAAoB,qCAApB;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAEM,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACF,KAACD,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B,EAD5B;AAGF,KAACH,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAH5B,GAD+B;AAOrCC,EAAAA,gBAAgB,EAAE;AACd,KAACJ,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAC1BE,MAAAA,OAAO,EAAE,MADiB;AAE1BC,MAAAA,aAAa,EAAE,QAFW;AAG1BC,MAAAA,UAAU,EAAE,QAHc;AAI1BC,MAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd;AAJkB;AADhB,GAPmB;AAerCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAE,KADA;AAEPC,IAAAA,SAAS,EAAEZ,KAAK,CAACS,OAAN,CAAc,GAAd,CAFJ;AAGP,uBAAmB;AACfI,MAAAA,WAAW,EAAEb,KAAK,CAACS,OAAN,CAAc,CAAd;AADE;AAHZ,GAf0B;AAsBrCK,EAAAA,aAAa,EAAE;AACX,KAACd,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAC1BE,MAAAA,OAAO,EAAE,MADiB;AAE1BC,MAAAA,aAAa,EAAE,KAFW;AAG1BS,MAAAA,cAAc,EAAE;AAHU;AADnB;AAtBsB,CAAZ,CAAD,CAA5B;AA+BA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC5C,QAAMC,OAAO,GAAGnB,SAAS,EAAzB;AAEA,QAAM,CAACoB,UAAD,IAAe7B,QAAQ,CAAC,yCAAyCQ,EAAE,CAACsB,MAA7C,CAA7B;AACA,QAAM,CAACC,mBAAD,IAAwB/B,QAAQ,CAACQ,EAAE,CAACwB,cAAJ,CAAtC;AACA,QAAM,CAACC,MAAD,IAAWjC,QAAQ,CAACQ,EAAE,CAAC0B,MAAJ,CAAzB;AACA,QAAM,CAACC,OAAD,IAAYnC,QAAQ,CAAC;AACvBmC,IAAAA,OAAO,EAAE;AACL,mBAAaF;AADR;AADc,GAAD,CAA1B;AAMA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBrC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACsC,IAAD,EAAOC,OAAP,IAAkBvC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwC,YAAD,EAAeC,eAAf,IAAkCzC,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC0C,WAAD,EAAcC,cAAd,IAAgC3C,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAM4C,cAAc,GAAIN,IAAD,IAAU;AAC7B,QAAIO,KAAK,GAAG,aAAZ;AACA,QAAIC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWT,IAAX,KAAoBA,IAAI,CAACU,MAAL,GAAc,CAA9C;AACAF,IAAAA,KAAK,GAAGH,cAAc,CAAC,KAAD,CAAjB,GAA2BA,cAAc,CAAC,IAAD,CAA9C;AACA,WAAOG,KAAP;AACH,GALD;;AAOA,QAAMG,eAAe,GAAIb,KAAD,IAAW;AAC/B,QAAIS,KAAK,GAAG,yJAAZ;AACA,QAAIC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWG,MAAM,CAACd,KAAD,CAAN,CAAce,WAAd,EAAX,CAAZ;AACAL,IAAAA,KAAK,GAAGL,eAAe,CAAC,KAAD,CAAlB,GAA4BA,eAAe,CAAC,IAAD,CAAhD;AACA,WAAOK,KAAP;AACH,GALD;;AAOA,QAAMM,aAAa,GAAG,CAACd,IAAD,EAAOF,KAAP,KAAiB;AACnCjC,IAAAA,KAAK,CAACkD,IAAN,CAAY,GAAExB,UAAW,eAAzB,EAAyC;AACrCyB,MAAAA,OAAO,EAAE;AACLlB,QAAAA,KAAK,EAAEA,KADF;AAELmB,QAAAA,SAAS,EAAEjB,IAFN;AAGLkB,QAAAA,QAAQ,EAAE,EAHL;AAILC,QAAAA,KAAK,EAAE;AAJF;AAD4B,KAAzC,EAOGtB,OAPH,EAOYuB,IAPZ,CAOkBC,QAAD,IAAc;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAC,MAAAA,eAAe,CAACH,QAAQ,CAACI,IAAT,CAAcT,OAAd,CAAsBU,EAAvB,EAA2BxD,EAAE,CAACwB,cAA9B,CAAf;AACH,KAVD,EAUGiC,KAVH,CAUUC,KAAD,IAAW;AAChBN,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCK,KAAjC;AACH,KAZD;AAaH,GAdD;;AAgBA,QAAMJ,eAAe,GAAG,CAACR,OAAD,EAAUa,UAAV,KAAyB;AAC7ChE,IAAAA,KAAK,CAACkD,IAAN,CAAY,GAAExB,UAAW,qBAAzB,EAA+C;AAC3CuC,MAAAA,iBAAiB,EAAE;AACfd,QAAAA,OAAO,EAAEA,OADM;AAEfa,QAAAA,UAAU,EAAEA;AAFG;AADwB,KAA/C,EAKGhC,OALH,EAKYuB,IALZ,CAKkBC,QAAD,IAAc;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KAPD,EAOGI,KAPH,CAOUC,KAAD,IAAW;AAChBN,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CK,KAA7C;AACH,KATD;AAUH,GAXD;;AAaA,QAAMG,aAAa,GAAG,MAAM;AACxB,QAAIC,UAAU,GAAGrB,eAAe,CAACb,KAAD,CAAhC;AACA,QAAImC,SAAS,GAAG3B,cAAc,CAACN,IAAD,CAA9B;;AACA,QAAGgC,UAAU,IAAIC,SAAjB,EAA4B;AACxBnB,MAAAA,aAAa,CAACd,IAAD,EAAMF,KAAN,CAAb;AACAT,MAAAA,KAAK,CAAC6C,aAAN,CAAoB,IAApB;AACH;AACJ,GAPD;;AASA,sBACI;AAAK,IAAA,SAAS,EAAE5C,OAAO,CAACjB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAGI;AAAK,IAAA,SAAS,EAAEiB,OAAO,CAACd,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEc,OAAO,CAACR,SADvB;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,KAAK,EAAC,WAHV;AAII,IAAA,KAAK,EAAEsB,WAJX;AAKI,IAAA,KAAK,EAAC,MALV;AAMI,IAAA,QAAQ,EAAG+B,KAAD,IAAW;AAAElC,MAAAA,OAAO,CAACkC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AAA6B,KANxD;AAOI,IAAA,MAAM,EAAE,MAAM;AAAE/B,MAAAA,cAAc,CAACN,IAAD,CAAd;AAAsB,KAP1C;AAQI,IAAA,UAAU,EAAEI,WAAW,GAAG,4BAAH,GAAkC,EAR7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAWI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEd,OAAO,CAACR,SADvB;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,KAAK,EAAC,WAHV;AAII,IAAA,KAAK,EAAEoB,YAJX;AAKI,IAAA,KAAK,EAAC,QALV;AAMI,IAAA,QAAQ,EAAGiC,KAAD,IAAW;AAAEpC,MAAAA,QAAQ,CAACoC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AAA8B,KANzD;AAOI,IAAA,MAAM,EAAE,MAAM;AAAE1B,MAAAA,eAAe,CAACb,KAAD,CAAf;AAAwB,KAP5C;AAQI,IAAA,UAAU,EAAEI,YAAY,GAAG,6BAAH,GAAmC,EAR/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CAHJ,eAyBI;AAAK,IAAA,SAAS,EAAEZ,OAAO,CAACJ,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAC,WADZ;AAEI,IAAA,KAAK,EAAC,WAFV;AAGI,IAAA,OAAO,EAAE,MAAM;AAAG6C,MAAAA,aAAa;AAAK,KAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CAzBJ,CADJ;AAqCH","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, TextField, Button } from '@material-ui/core';\n\nimport * as ac from '../../../utilities/acampaign-config';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        [theme.breakpoints.up('xs')]: {\n        },\n        [theme.breakpoints.up('md')]: {\n        }\n    },\n    textFieldWrapper: {\n        [theme.breakpoints.up('xs')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: theme.spacing(2)\n        }\n    },\n    textField: {\n        width: '50%',\n        marginTop: theme.spacing(0.5),\n        '&:first-of-type': {\n            marginRight: theme.spacing(1)\n        }\n    },\n    buttonWrapper: {\n        [theme.breakpoints.up('xs')]: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n        }\n    }\n}))\n\nexport default function WebRTCAutomation(props) {\n    const classes = useStyles();\n\n    const [accountUrl] = useState(\"https://cors-anywhere.herokuapp.com/\" + ac.APIURL);\n    const [webcasterAutomation] = useState(ac.WEBCASTER_DEMO);\n    const [apiKey] = useState(ac.APIKEY);\n    const [headers] = useState({\n        headers: {\n            \"Api-Token\": apiKey\n        }\n    })\n\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [emailInvalid, setEmailInvalid] = useState(false);\n    const [nameInvalid, setNameInvalid] = useState(false);\n\n    const checkValidName = (name) => {\n        let regex = /^[a-zA-Z]+$/\n        let valid = regex.test(name) && name.length > 1;\n        valid ? setNameInvalid(false) : setNameInvalid(true)\n        return valid\n    }\n\n    const checkValidEmail = (email) => {\n        let regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let valid = regex.test(String(email).toLowerCase());\n        valid ? setEmailInvalid(false) : setEmailInvalid(true)\n        return valid;\n    }\n\n    const createContact = (name, email) => {\n        axios.post(`${accountUrl}/contact/sync`, {\n            contact: {\n                email: email,\n                firstName: name,\n                lastName: \"\",\n                phone: \"\"\n            }\n        }, headers).then((response) => {\n            console.log(\"added to contact list\")\n            addToAutomation(response.data.contact.id, ac.WEBCASTER_DEMO);\n        }).catch((error) => {\n            console.log(\"Error in Creating\", error)\n        })\n    }\n\n    const addToAutomation = (contact, automation) => {\n        axios.post(`${accountUrl}/contactAutomations`, {\n            contactAutomation: {\n                contact: contact,\n                automation: automation\n            }\n        }, headers).then((response) => {\n            console.log(\"added to automation\");\n        }).catch((error) => {\n            console.log(\"Error in Adding to Automation\", error)\n        })\n    }\n\n    const showWebcaster = () => {\n        let validEmail = checkValidEmail(email);\n        let validName = checkValidName(name);\n        if(validEmail && validName) {\n            createContact(name,email);\n            props.showQuickDemo(true);\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <Typography variant=\"button\">\n            </Typography>\n            <div className={classes.textFieldWrapper}>\n                <TextField\n                    className={classes.textField}\n                    required\n                    color=\"secondary\"\n                    error={nameInvalid}\n                    label=\"Name\"\n                    onChange={(event) => { setName(event.target.value) }}\n                    onBlur={() => { checkValidName(name) }}\n                    helperText={nameInvalid ? \"Please enter a valid name.\" : \"\"}\n                />\n                <TextField\n                    className={classes.textField}\n                    required\n                    color=\"secondary\"\n                    error={emailInvalid}\n                    label=\"E-Mail\"\n                    onChange={(event) => { setEmail(event.target.value) }}\n                    onBlur={() => { checkValidEmail(email) }}\n                    helperText={emailInvalid ? \"Please enter a valid email.\" : \"\"}\n                />\n            </div>\n            <div className={classes.buttonWrapper}>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {  showWebcaster(); }}\n                >\n                    Show quick demo\n                </Button>\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}