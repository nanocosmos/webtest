{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\nimport theme from '../utilities/theme';\nlet font = \"https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700,900&display=swap\";\nexport default class MyDocument extends Document {\n  render() {\n    return __jsx(Html, {\n      lang: \"en\"\n    }, __jsx(Head, null, __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: theme.palette.primary.main\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      href: \"./favicon.ico\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#000000\"\n    }), __jsx(\"meta\", {\n      name: \"nanocosmos\",\n      content: \"Live stream your interacgtive use cases with ultra-low latency!\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      href: \"./apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"./apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"./site.webmanifest\"\n    }), __jsx(\"link\", {\n      rel: \"mask-icon\",\n      href: \"./safari-pinned-tab.svg\",\n      color: theme.palette.primary.main\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: theme.palette.primary.main\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: font\n    }), __jsx(\"script\", {\n      src: \"https://webrtc.nanocosmos.de/webrtc-api/5/nano.webrtc.min.js\"\n    }), __jsx(\"script\", {\n      src: \"https://webrtc.nanocosmos.de/webrtc-api/5/nano.bintu.min.js\"\n    }), __jsx(\"script\", {\n      src: \"https://demo.nanocosmos.de/nanoplayer/api/release/nanoplayer.4.min.js\"\n    }), __jsx(\"script\", {\n      src: \"https://webrtc.nanocosmos.de/release/js/app/nano.config.js\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n} // `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with server-side generation (SSG).\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread(_objectSpread({}, initialProps), {}, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}