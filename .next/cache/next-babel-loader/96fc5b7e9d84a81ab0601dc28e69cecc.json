{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function preview(_x, _x2) {\n  return _preview.apply(this, arguments);\n}\n\nfunction _preview() {\n  _preview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var post;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(req.query.secret !== process.env.NEXT_EXAMPLE_CMS_STRAPI_PREVIEW_SECRET || !req.query.slug)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.status(401).json({\n              message: 'Invalid token'\n            }));\n\n          case 2:\n            _context.next = 4;\n            return getPreviewPostBySlug(req.query.slug);\n\n          case 4:\n            post = _context.sent;\n\n            if (post) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.status(401).json({\n              message: 'Invalid slug'\n            }));\n\n          case 7:\n            // Enable Preview Mode by setting the cookies\n            res.setPreviewData({}); // Redirect to the path from the fetched post\n            // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n\n            res.writeHead(307, {\n              Location: \"/posts/\".concat(post.slug)\n            });\n            res.end();\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _preview.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/annamatic/Desktop/webtest/pages/preview.js"],"names":["preview","req","res","query","secret","process","env","NEXT_EXAMPLE_CMS_STRAPI_PREVIEW_SECRET","slug","status","json","message","getPreviewPostBySlug","post","setPreviewData","writeHead","Location","end"],"mappings":";;AAAA,wBAA8BA,OAA9B;AAAA;AAAA;;;sEAAe,iBAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIXD,GAAG,CAACE,KAAJ,CAAUC,MAAV,KAAqBC,OAAO,CAACC,GAAR,CAAYC,sCAAjC,IACA,CAACN,GAAG,CAACE,KAAJ,CAAUK,IALA;AAAA;AAAA;AAAA;;AAAA,6CAOJN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPI;;AAAA;AAAA;AAAA,mBAWMC,oBAAoB,CAACX,GAAG,CAACE,KAAJ,CAAUK,IAAX,CAX1B;;AAAA;AAWPK,YAAAA,IAXO;;AAAA,gBAcRA,IAdQ;AAAA;AAAA;AAAA;;AAAA,6CAeJX,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAfI;;AAAA;AAkBb;AACAT,YAAAA,GAAG,CAACY,cAAJ,CAAmB,EAAnB,EAnBa,CAqBb;AACA;;AACAZ,YAAAA,GAAG,CAACa,SAAJ,CAAc,GAAd,EAAmB;AAAEC,cAAAA,QAAQ,mBAAYH,IAAI,CAACL,IAAjB;AAAV,aAAnB;AACAN,YAAAA,GAAG,CAACe,GAAJ;;AAxBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export default async function preview(req, res) {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (\n    req.query.secret !== process.env.NEXT_EXAMPLE_CMS_STRAPI_PREVIEW_SECRET ||\n    !req.query.slug\n  ) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  const post = await getPreviewPostBySlug(req.query.slug)\n\n  // If the slug doesn't exist prevent preview mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n\n  // Enable Preview Mode by setting the cookies\n  res.setPreviewData({})\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.writeHead(307, { Location: `/posts/${post.slug}` })\n  res.end()\n}"]},"metadata":{},"sourceType":"module"}