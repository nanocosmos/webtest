{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var slug;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.status(401).json({\n              message: 'Invalid token'\n            }));\n\n          case 2:\n            _context.next = 4;\n            return getPostBySlug(req.query.slug);\n\n          case 4:\n            slug = _context.sent;\n\n            if (slug) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.status(401).json({\n              message: 'Invalid slug'\n            }));\n\n          case 7:\n            // Enable Preview Mode by setting the cookies\n            res.setPreviewData({}); // Redirect to the path from the fetched post\n            // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n\n            res.writeHead(307, {\n              Location: slug.slug\n            });\n            res.end();\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/annamatic/Desktop/webtest/pages/preview.js"],"names":["req","res","query","secret","slug","status","json","message","getPostBySlug","setPreviewData","writeHead","Location","end"],"mappings":";;AAAA;AAAA,sEAAe,iBAAOA,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGPD,GAAG,CAACE,KAAJ,CAAUC,MAAV,KAAqB,iBAArB,IAA0C,CAACH,GAAG,CAACE,KAAJ,CAAUE,IAH9C;AAAA;AAAA;AAAA;;AAAA,6CAIFH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAJE;;AAAA;AAAA;AAAA,mBASQC,aAAa,CAACR,GAAG,CAACE,KAAJ,CAAUE,IAAX,CATrB;;AAAA;AASLA,YAAAA,IATK;;AAAA,gBAYNA,IAZM;AAAA;AAAA;AAAA;;AAAA,6CAaFH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAbE;;AAAA;AAgBX;AACAN,YAAAA,GAAG,CAACQ,cAAJ,CAAmB,EAAnB,EAjBW,CAmBX;AACA;;AACAR,YAAAA,GAAG,CAACS,SAAJ,CAAc,GAAd,EAAmB;AAAEC,cAAAA,QAAQ,EAAEP,IAAI,CAACA;AAAjB,aAAnB;AACAH,YAAAA,GAAG,CAACW,GAAJ;;AAtBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export default async (req, res) => {\n    // Check the secret and next parameters\n    // This secret should only be known to this API route and the CMS\n    if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n      return res.status(401).json({ message: 'Invalid token' })\n    }\n  \n    // Fetch the headless CMS to check if the provided `slug` exists\n    // getPostBySlug would implement the required fetching logic to the headless CMS\n    const slug = await getPostBySlug(req.query.slug)\n  \n    // If the slug doesn't exist prevent preview mode from being enabled\n    if (!slug) {\n      return res.status(401).json({ message: 'Invalid slug' })\n    }\n  \n    // Enable Preview Mode by setting the cookies\n    res.setPreviewData({})\n  \n    // Redirect to the path from the fetched post\n    // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n    res.writeHead(307, { Location: slug.slug })\n    res.end()\n  }"]},"metadata":{},"sourceType":"module"}