{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, Typography, ListItem, Button, List, Popper } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  var _button;\n\n  return {\n    root: _defineProperty({}, theme.breakpoints.up('xs'), {}),\n    button: (_button = {}, _defineProperty(_button, theme.breakpoints.up('xs'), {\n      color: theme.palette.common.white,\n      margin: theme.spacing(0, 0.5)\n    }), _defineProperty(_button, ':&hover', {\n      cursor: 'pointer'\n    }), _button),\n    outlined: {\n      border: \"0.5px solid \".concat(theme.palette.common.white)\n    },\n    listMenu: {\n      backgroundColor: theme.palette.primary.main,\n      padding: 0,\n      borderRadius: theme.spacing(0.2),\n      boxShadow: theme.shadows[4]\n    },\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n    highlight: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.common.white,\n        boxShadow: theme.shadows[4]\n      }\n    },\n    link: {\n      color: 'inherit',\n      textDecoration: 'none'\n    }\n  };\n});\nexport default function DesktopMenuItem(props) {\n  var classes = useStyles();\n\n  var _useState = useState(null),\n      anchorEl = _useState[0],\n      setAnchorEl = _useState[1];\n\n  var _useState2 = useState(false),\n      showSubmenu = _useState2[0],\n      setShowSubmenu = _useState2[1];\n\n  var handleOpenSubmenu = function handleOpenSubmenu(event) {\n    setAnchorEl(event.currentTarget);\n    setShowSubmenu(true);\n  };\n\n  var closeSubmenu = function closeSubmenu() {\n    setAnchorEl(null);\n    setShowSubmenu(false);\n  };\n\n  var redirect = function redirect(link) {\n    setShowSubmenu(false);\n    setAnchorEl(null); // PROPS\n  };\n\n  var button = clsx(classes.button, _defineProperty({}, classes[props.menuItem.className], props.menuItem.className));\n  return __jsx(FormControl, {\n    className: classes.root,\n    onMouseLeave: closeSubmenu\n  }, __jsx(Button, {\n    className: button,\n    onClick: function onClick(event) {\n      props.menuItem.submenu ? handleOpenSubmenu(event) : redirect(props.menuItem.link);\n    },\n    onMouseOver: handleOpenSubmenu\n  }, props.menuItem.submenu ? props.menuItem.name : __jsx(Link, {\n    style: classes.link,\n    href: props.menuItem.link\n  }, __jsx(\"a\", {\n    className: classes.link\n  }, props.menuItem.name))), props.menuItem.submenu ? __jsx(Popper, {\n    className: classes.popper,\n    placement: \"bottom\",\n    anchorEl: anchorEl,\n    open: showSubmenu\n  }, __jsx(List, {\n    className: classes.listMenu\n  }, props.menuItem.submenu.map(function (menuItem, index) {\n    return __jsx(ListItem, _defineProperty({\n      key: \"\".concat(menuItem.name, \"-\").concat(index),\n      button: true,\n      onClick: function onClick() {\n        redirect(menuItem.link);\n      }\n    }, \"key\", menuItem.name), __jsx(Typography, {\n      className: classes.title,\n      variant: \"button\"\n    }, __jsx(Link, {\n      href: menuItem.link\n    }, __jsx(\"a\", {\n      className: classes.link\n    }, menuItem.name))));\n  }))) : null);\n}\n; // import React, { useState } from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import { FormControl, Typography, ListItem, Button, List, Popper } from '@material-ui/core';\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//         [theme.breakpoints.up('xs')]: {\n//         }\n//     },\n//     button: {\n//         [theme.breakpoints.up('xs')]: {\n//             color: theme.palette.common.white\n//         },\n//         ':&hover': {\n//             cursor: 'pointer'\n//         }\n//     },\n//     listMenu: {\n//         backgroundColor: theme.palette.primary.main,\n//         padding: 0,\n//         borderRadius: theme.spacing(0.2),\n//         boxShadow: theme.shadows[4]\n//     },\n//     popper: {\n//         zIndex: theme.zIndex.modal\n//     },\n//     highlight: {\n//         backgroundColor: theme.palette.common.white,\n//         color: theme.palette.primary.main,\n//         '&:hover': {\n//             backgroundColor: theme.palette.common.white,\n//             boxShadow: theme.shadows[4]\n//         }\n//     }\n// }))\n// export default function DesktopMenuItem(props) {\n//     const classes = useStyles();\n//     const [anchorElSubMenu, setAnchorElSubMenu] = useState(null);\n//     const [anchorElSubSubMenu, setAnchorElSubSubMenu] = useState(null);\n//     const [showSubmenu, setShowSubmenu] = useState(false);\n//     const [showSubSubMenu, setShowSubSubMenu] = useState(false);\n//     const [menuId] = useState({\n//         submenu: 1,\n//         subsubMenu: 2\n//     })\n//     const handleOpenSubmenu = (event, menuId) => {\n//         switch (menuId) {\n//             case 1:\n//                 setAnchorElSubMenu(event.currentTarget);\n//                 setShowSubmenu(true);\n//                 return;\n//             case 2:\n//                 setAnchorElSubSubMenu(event.currentTarget);\n//                 setShowSubSubMenu(true);\n//                 return;\n//             default: break;\n//         }\n//     }\n//     const closeSubmenu = () => {\n//         setAnchorElSubMenu(null);\n//         setAnchorElSubSubMenu(null);\n//         setShowSubmenu(false);\n//         setShowSubSubMenu(false);\n//     }\n//     const redirect = (link) => {\n//         window.open(`${link}`, \"_self\")\n//         setShowSubmenu(false);\n//         setAnchorElSubMenu(null);\n//         setShowSubSubMenu(false);\n//         setAnchorElSubSubMenu(null);\n//     }\n//     return (\n//         <FormControl\n//             className={classes.root}\n//             onMouseLeave={closeSubmenu}\n//         >\n//             <Button\n//                 className={props.menuItem.highlight ? classes.highlight : classes.button}\n//                 onClick={(event) => { props.menuItem.submenu ? handleOpenSubmenu(event, menuId.submenu) : redirect(props.menuItem.link) }}\n//                 onMouseOver={(event) => { handleOpenSubmenu(event, menuId.submenu) }}\n//             >\n//                 {props.menuItem.name}\n//             </Button>\n//             {\n//                 props.menuItem.submenu\n//                     ?\n//                     <Popper\n//                         className={classes.popper}\n//                         placement=\"bottom\"\n//                         anchorEl={anchorElSubMenu}\n//                         open={showSubmenu}\n//                     >\n//                         <List className={classes.listMenu} >\n//                             {\n//                                 props.menuItem.submenu.map((menuItem) => (\n//                                     <span>\n//                                         <ListItem\n//                                             button\n//                                             onClick={() => { redirect(menuItem.link) }}\n//                                             onClick={(event) => { menuItem.submenu ? handleOpenSubmenu(event, menuId.subsubMenu) : redirect(menuItem.link) }}\n//                                             key={menuItem.name}\n//                                             onMouseOver={(event) => { handleOpenSubmenu(event, menuId.subsubMenu) }}\n//                                         >\n//                                             <Typography className={classes.title} variant=\"button\">\n//                                                 {menuItem.name}\n//                                             </Typography>\n//                                         </ListItem>\n//                                         {\n//                                             showSubSubMenu && menuItem.submenu\n//                                                 ?\n//                                                 menuItem.submenu.map((menuItem) => (\n//                                                     <ListItem\n//                                                         button\n//                                                         onClick={(event) => { menuItem.submenu ? handleOpenSubmenu(event) : redirect(menuItem.link) }}\n//                                                         key={menuItem.name}\n//                                                     >\n//                                                         <Typography className={classes.title} variant=\"button\">\n//                                                             {menuItem.name}\n//                                                         </Typography>\n//                                                     </ListItem>\n//                                                 ))\n//                                                 : null\n//                                         }\n//                                     </span>\n//                                 ))\n//                             }\n//                         </List>\n//                     </Popper>\n//                     : null\n//             }\n//         </FormControl>\n//     );\n// };","map":null,"metadata":{},"sourceType":"module"}