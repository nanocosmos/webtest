{"ast":null,"code":"var _jsxFileName = \"/Users/annamatic/Desktop/webtest/components/layout/menu/DesktopMenuItem.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, Typography, ListItem, Button, List, Popper } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    [theme.breakpoints.up('xs')]: {}\n  },\n  button: {\n    [theme.breakpoints.up('xs')]: {\n      color: theme.palette.common.white,\n      margin: theme.spacing(0, 0.5)\n    },\n    ':&hover': {\n      cursor: 'pointer'\n    }\n  },\n  outlined: {\n    border: `0.5px solid ${theme.palette.common.white}`\n  },\n  listMenu: {\n    backgroundColor: theme.palette.primary.main,\n    padding: 0,\n    borderRadius: theme.spacing(0.2),\n    boxShadow: theme.shadows[4]\n  },\n  popper: {\n    zIndex: theme.zIndex.modal\n  },\n  highlight: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.common.white,\n      boxShadow: theme.shadows[4]\n    }\n  },\n  link: {\n    color: 'inherit',\n    textDecoration: 'none'\n  }\n}));\nexport default function DesktopMenuItem(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const {\n    0: showSubmenu,\n    1: setShowSubmenu\n  } = useState(false);\n\n  const handleOpenSubmenu = event => {\n    setAnchorEl(event.currentTarget);\n    setShowSubmenu(true);\n  };\n\n  const closeSubmenu = () => {\n    setAnchorEl(null);\n    setShowSubmenu(false);\n  };\n\n  const redirect = link => {\n    setShowSubmenu(false);\n    setAnchorEl(null); // PROPS\n  };\n\n  const button = clsx(classes.button, {\n    [classes[props.menuItem.className]]: props.menuItem.className\n  });\n  return __jsx(FormControl, {\n    className: classes.root,\n    onMouseLeave: closeSubmenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    className: button,\n    onClick: event => {\n      props.menuItem.submenu ? handleOpenSubmenu(event) : redirect(props.menuItem.link);\n    },\n    onMouseOver: handleOpenSubmenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, props.menuItem.submenu ? props.menuItem.name : __jsx(Link, {\n    href: props.menuItem.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, props.menuItem.name))), props.menuItem.submenu ? __jsx(Popper, {\n    className: classes.popper,\n    placement: \"bottom\",\n    anchorEl: anchorEl,\n    open: showSubmenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, __jsx(List, {\n    className: classes.listMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, props.menuItem.submenu.map((menuItem, index) => __jsx(ListItem, {\n    key: `${menuItem.name}-${index}`,\n    button: true,\n    onClick: () => {\n      redirect(menuItem.link);\n    },\n    key: menuItem.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    className: classes.title,\n    variant: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 41\n    }\n  }, __jsx(Link, {\n    href: menuItem.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 45\n    }\n  }, __jsx(\"a\", {\n    className: classes.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 49\n    }\n  }, menuItem.name))))))) : null);\n}\n\n_s(DesktopMenuItem, \"RA+5Bjpte4cjUmXkdqMENRDmHA8=\", false, function () {\n  return [useStyles];\n});\n\n_c = DesktopMenuItem;\n; // import React, { useState } from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import { FormControl, Typography, ListItem, Button, List, Popper } from '@material-ui/core';\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//         [theme.breakpoints.up('xs')]: {\n//         }\n//     },\n//     button: {\n//         [theme.breakpoints.up('xs')]: {\n//             color: theme.palette.common.white\n//         },\n//         ':&hover': {\n//             cursor: 'pointer'\n//         }\n//     },\n//     listMenu: {\n//         backgroundColor: theme.palette.primary.main,\n//         padding: 0,\n//         borderRadius: theme.spacing(0.2),\n//         boxShadow: theme.shadows[4]\n//     },\n//     popper: {\n//         zIndex: theme.zIndex.modal\n//     },\n//     highlight: {\n//         backgroundColor: theme.palette.common.white,\n//         color: theme.palette.primary.main,\n//         '&:hover': {\n//             backgroundColor: theme.palette.common.white,\n//             boxShadow: theme.shadows[4]\n//         }\n//     }\n// }))\n// export default function DesktopMenuItem(props) {\n//     const classes = useStyles();\n//     const [anchorElSubMenu, setAnchorElSubMenu] = useState(null);\n//     const [anchorElSubSubMenu, setAnchorElSubSubMenu] = useState(null);\n//     const [showSubmenu, setShowSubmenu] = useState(false);\n//     const [showSubSubMenu, setShowSubSubMenu] = useState(false);\n//     const [menuId] = useState({\n//         submenu: 1,\n//         subsubMenu: 2\n//     })\n//     const handleOpenSubmenu = (event, menuId) => {\n//         switch (menuId) {\n//             case 1:\n//                 setAnchorElSubMenu(event.currentTarget);\n//                 setShowSubmenu(true);\n//                 return;\n//             case 2:\n//                 setAnchorElSubSubMenu(event.currentTarget);\n//                 setShowSubSubMenu(true);\n//                 return;\n//             default: break;\n//         }\n//     }\n//     const closeSubmenu = () => {\n//         setAnchorElSubMenu(null);\n//         setAnchorElSubSubMenu(null);\n//         setShowSubmenu(false);\n//         setShowSubSubMenu(false);\n//     }\n//     const redirect = (link) => {\n//         window.open(`${link}`, \"_self\")\n//         setShowSubmenu(false);\n//         setAnchorElSubMenu(null);\n//         setShowSubSubMenu(false);\n//         setAnchorElSubSubMenu(null);\n//     }\n//     return (\n//         <FormControl\n//             className={classes.root}\n//             onMouseLeave={closeSubmenu}\n//         >\n//             <Button\n//                 className={props.menuItem.highlight ? classes.highlight : classes.button}\n//                 onClick={(event) => { props.menuItem.submenu ? handleOpenSubmenu(event, menuId.submenu) : redirect(props.menuItem.link) }}\n//                 onMouseOver={(event) => { handleOpenSubmenu(event, menuId.submenu) }}\n//             >\n//                 {props.menuItem.name}\n//             </Button>\n//             {\n//                 props.menuItem.submenu\n//                     ?\n//                     <Popper\n//                         className={classes.popper}\n//                         placement=\"bottom\"\n//                         anchorEl={anchorElSubMenu}\n//                         open={showSubmenu}\n//                     >\n//                         <List className={classes.listMenu} >\n//                             {\n//                                 props.menuItem.submenu.map((menuItem) => (\n//                                     <span>\n//                                         <ListItem\n//                                             button\n//                                             onClick={() => { redirect(menuItem.link) }}\n//                                             onClick={(event) => { menuItem.submenu ? handleOpenSubmenu(event, menuId.subsubMenu) : redirect(menuItem.link) }}\n//                                             key={menuItem.name}\n//                                             onMouseOver={(event) => { handleOpenSubmenu(event, menuId.subsubMenu) }}\n//                                         >\n//                                             <Typography className={classes.title} variant=\"button\">\n//                                                 {menuItem.name}\n//                                             </Typography>\n//                                         </ListItem>\n//                                         {\n//                                             showSubSubMenu && menuItem.submenu\n//                                                 ?\n//                                                 menuItem.submenu.map((menuItem) => (\n//                                                     <ListItem\n//                                                         button\n//                                                         onClick={(event) => { menuItem.submenu ? handleOpenSubmenu(event) : redirect(menuItem.link) }}\n//                                                         key={menuItem.name}\n//                                                     >\n//                                                         <Typography className={classes.title} variant=\"button\">\n//                                                             {menuItem.name}\n//                                                         </Typography>\n//                                                     </ListItem>\n//                                                 ))\n//                                                 : null\n//                                         }\n//                                     </span>\n//                                 ))\n//                             }\n//                         </List>\n//                     </Popper>\n//                     : null\n//             }\n//         </FormControl>\n//     );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"DesktopMenuItem\");","map":{"version":3,"sources":["/Users/annamatic/Desktop/webtest/components/layout/menu/DesktopMenuItem.js"],"names":["React","useState","Link","clsx","makeStyles","FormControl","Typography","ListItem","Button","List","Popper","useStyles","theme","root","breakpoints","up","button","color","palette","common","white","margin","spacing","cursor","outlined","border","listMenu","backgroundColor","primary","main","padding","borderRadius","boxShadow","shadows","popper","zIndex","modal","highlight","link","textDecoration","DesktopMenuItem","props","classes","anchorEl","setAnchorEl","showSubmenu","setShowSubmenu","handleOpenSubmenu","event","currentTarget","closeSubmenu","redirect","menuItem","className","submenu","name","map","index","title"],"mappings":"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":["import React, { useState } from 'react';\nimport Link from 'next/link'\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, Typography, ListItem, Button, List, Popper } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        [theme.breakpoints.up('xs')]: {\n        }\n    },\n    button: {\n        [theme.breakpoints.up('xs')]: {\n            color: theme.palette.common.white,\n            margin: theme.spacing(0, 0.5)\n        },\n        ':&hover': {\n            cursor: 'pointer'\n        }\n    },\n    outlined: {\n        border: `0.5px solid ${theme.palette.common.white}`\n    },\n    listMenu: {\n        backgroundColor: theme.palette.primary.main,\n        padding: 0,\n        borderRadius: theme.spacing(0.2),\n        boxShadow: theme.shadows[4]\n    },\n    popper: {\n        zIndex: theme.zIndex.modal\n    },\n    highlight: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.primary.main,\n        '&:hover': {\n            backgroundColor: theme.palette.common.white,\n            boxShadow: theme.shadows[4]\n        }\n    },\n    link: {\n        color: 'inherit',\n        textDecoration: 'none'\n    }\n}))\n\nexport default function DesktopMenuItem(props) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [showSubmenu, setShowSubmenu] = useState(false);\n\n\n    const handleOpenSubmenu = (event) => {\n        setAnchorEl(event.currentTarget);\n        setShowSubmenu(true);\n    }\n\n    const closeSubmenu = () => {\n        setAnchorEl(null);\n        setShowSubmenu(false);\n    }\n\n    const redirect = (link) => {\n        setShowSubmenu(false);\n        setAnchorEl(null);\n        // PROPS\n    }\n\n    const button = clsx(classes.button, {\n        [classes[props.menuItem.className]]: props.menuItem.className\n    })\n\n    return (\n        <FormControl\n            className={classes.root}\n            onMouseLeave={closeSubmenu}\n        >\n            <Button\n                className={button}\n                onClick={(event) => { props.menuItem.submenu ? handleOpenSubmenu(event) : redirect(props.menuItem.link) }}\n                onMouseOver={handleOpenSubmenu}\n            >\n                {\n                    props.menuItem.submenu\n                        ? props.menuItem.name\n                        :\n                        <Link href={props.menuItem.link}>\n                            <a className={classes.link}>\n                                {props.menuItem.name}\n                            </a>\n                        </Link>\n                }\n\n            </Button>\n            {\n                props.menuItem.submenu\n                    ?\n                    <Popper\n                        className={classes.popper}\n                        placement=\"bottom\"\n                        anchorEl={anchorEl}\n                        open={showSubmenu}\n                    >\n                        <List className={classes.listMenu} >\n                            {\n                                props.menuItem.submenu.map((menuItem, index) => (\n                                    <ListItem\n                                        key={`${menuItem.name}-${index}`}\n                                        button\n                                        onClick={() => { redirect(menuItem.link) }}\n                                        key={menuItem.name}\n                                    >\n                                        <Typography className={classes.title} variant=\"button\">\n                                            <Link href={menuItem.link}>\n                                                <a className={classes.link}>\n                                                    {menuItem.name}\n                                                </a>\n                                            </Link>\n                                        </Typography>\n                                    </ListItem>\n                                ))\n                            }\n                        </List>\n                    </Popper>\n                    : null\n            }\n        </FormControl>\n    );\n};\n\n\n// import React, { useState } from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import { FormControl, Typography, ListItem, Button, List, Popper } from '@material-ui/core';\n\n\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//         [theme.breakpoints.up('xs')]: {\n//         }\n//     },\n//     button: {\n//         [theme.breakpoints.up('xs')]: {\n//             color: theme.palette.common.white\n//         },\n//         ':&hover': {\n//             cursor: 'pointer'\n//         }\n//     },\n//     listMenu: {\n//         backgroundColor: theme.palette.primary.main,\n//         padding: 0,\n//         borderRadius: theme.spacing(0.2),\n//         boxShadow: theme.shadows[4]\n//     },\n//     popper: {\n//         zIndex: theme.zIndex.modal\n//     },\n//     highlight: {\n//         backgroundColor: theme.palette.common.white,\n//         color: theme.palette.primary.main,\n//         '&:hover': {\n//             backgroundColor: theme.palette.common.white,\n//             boxShadow: theme.shadows[4]\n//         }\n//     }\n// }))\n\n// export default function DesktopMenuItem(props) {\n//     const classes = useStyles();\n//     const [anchorElSubMenu, setAnchorElSubMenu] = useState(null);\n//     const [anchorElSubSubMenu, setAnchorElSubSubMenu] = useState(null);\n//     const [showSubmenu, setShowSubmenu] = useState(false);\n//     const [showSubSubMenu, setShowSubSubMenu] = useState(false);\n//     const [menuId] = useState({\n//         submenu: 1,\n//         subsubMenu: 2\n//     })\n\n\n//     const handleOpenSubmenu = (event, menuId) => {\n//         switch (menuId) {\n//             case 1:\n//                 setAnchorElSubMenu(event.currentTarget);\n//                 setShowSubmenu(true);\n//                 return;\n//             case 2:\n//                 setAnchorElSubSubMenu(event.currentTarget);\n//                 setShowSubSubMenu(true);\n//                 return;\n//             default: break;\n//         }\n//     }\n\n//     const closeSubmenu = () => {\n//         setAnchorElSubMenu(null);\n//         setAnchorElSubSubMenu(null);\n//         setShowSubmenu(false);\n//         setShowSubSubMenu(false);\n//     }\n\n//     const redirect = (link) => {\n//         window.open(`${link}`, \"_self\")\n//         setShowSubmenu(false);\n//         setAnchorElSubMenu(null);\n//         setShowSubSubMenu(false);\n//         setAnchorElSubSubMenu(null);\n//     }\n\n//     return (\n//         <FormControl\n//             className={classes.root}\n//             onMouseLeave={closeSubmenu}\n//         >\n//             <Button\n//                 className={props.menuItem.highlight ? classes.highlight : classes.button}\n//                 onClick={(event) => { props.menuItem.submenu ? handleOpenSubmenu(event, menuId.submenu) : redirect(props.menuItem.link) }}\n//                 onMouseOver={(event) => { handleOpenSubmenu(event, menuId.submenu) }}\n//             >\n//                 {props.menuItem.name}\n//             </Button>\n//             {\n//                 props.menuItem.submenu\n//                     ?\n//                     <Popper\n//                         className={classes.popper}\n//                         placement=\"bottom\"\n//                         anchorEl={anchorElSubMenu}\n//                         open={showSubmenu}\n//                     >\n//                         <List className={classes.listMenu} >\n//                             {\n//                                 props.menuItem.submenu.map((menuItem) => (\n//                                     <span>\n//                                         <ListItem\n//                                             button\n//                                             onClick={() => { redirect(menuItem.link) }}\n//                                             onClick={(event) => { menuItem.submenu ? handleOpenSubmenu(event, menuId.subsubMenu) : redirect(menuItem.link) }}\n//                                             key={menuItem.name}\n//                                             onMouseOver={(event) => { handleOpenSubmenu(event, menuId.subsubMenu) }}\n//                                         >\n//                                             <Typography className={classes.title} variant=\"button\">\n//                                                 {menuItem.name}\n//                                             </Typography>\n//                                         </ListItem>\n//                                         {\n//                                             showSubSubMenu && menuItem.submenu\n//                                                 ?\n//                                                 menuItem.submenu.map((menuItem) => (\n//                                                     <ListItem\n//                                                         button\n//                                                         onClick={(event) => { menuItem.submenu ? handleOpenSubmenu(event) : redirect(menuItem.link) }}\n//                                                         key={menuItem.name}\n//                                                     >\n//                                                         <Typography className={classes.title} variant=\"button\">\n//                                                             {menuItem.name}\n//                                                         </Typography>\n//                                                     </ListItem>\n//                                                 ))\n//                                                 : null\n//                                         }\n//                                     </span>\n//                                 ))\n//                             }\n//                         </List>\n//                     </Popper>\n//                     : null\n//             }\n//         </FormControl>\n//     );\n// };"]},"metadata":{},"sourceType":"module"}